m[, "c"] = 0
m
# ispišite samo stupac "d"
# ispišite opet stupac "d", ali kod indeksiranja dodajte parametar `drop = FALSE`
# parametar odvojite zarezom (kao da se radi o "trećoj" dimenziji indeksiranja)
m <- matrix(1:30, 6, 5, T)
colnames(m) <- c("a", "b", "c", "d", "e")
# ispišite sve elemente matrice m od drugog do četvrtog retka
# te od trećeg do petog stupca
m[2:4, 3:5]
# sve elemente u stupcu naziva "c" postavite na nulu
# a potom ispišite prva dva retka matrice `m`
m[, "c"] = 0
m[1:2,]
# ispišite samo stupac "d"
# ispišite opet stupac "d", ali kod indeksiranja dodajte parametar `drop = FALSE`
# parametar odvojite zarezom (kao da se radi o "trećoj" dimenziji indeksiranja)
m <- matrix(1:30, 6, 5, T)
colnames(m) <- c("a", "b", "c", "d", "e")
# ispišite sve elemente matrice m od drugog do četvrtog retka
# te od trećeg do petog stupca
m[2:4, 3:5]
# sve elemente u stupcu naziva "c" postavite na nulu
# a potom ispišite prva dva retka matrice `m`
m[, "c"] = 0
m[1:2,]
# ispišite samo stupac "d"
m[, "d"]
# ispišite opet stupac "d", ali kod indeksiranja dodajte parametar `drop = FALSE`
# parametar odvojite zarezom (kao da se radi o "trećoj" dimenziji indeksiranja)
m <- matrix(1:30, 6, 5, T)
colnames(m) <- c("a", "b", "c", "d", "e")
m
# ispišite sve elemente matrice m od drugog do četvrtog retka
# te od trećeg do petog stupca
m[2:4, 3:5]
# sve elemente u stupcu naziva "c" postavite na nulu
# a potom ispišite prva dva retka matrice `m`
m[, "c"] = 0
m[1:2,]
# ispišite samo stupac "d"
m[, "d"]
# ispišite opet stupac "d", ali kod indeksiranja dodajte parametar `drop = FALSE`
# parametar odvojite zarezom (kao da se radi o "trećoj" dimenziji indeksiranja)
m <- matrix(1:30, 6, 5, T)
colnames(m) <- c("a", "b", "c", "d", "e")
m
# ispišite sve elemente matrice m od drugog do četvrtog retka
# te od trećeg do petog stupca
m[2:4, 3:5]
# sve elemente u stupcu naziva "c" postavite na nulu
# a potom ispišite prva dva retka matrice `m`
m[, "c"] = 0
m[1:2,]
# ispišite samo stupac "d"
m[, "d"]
# ispišite opet stupac "d", ali kod indeksiranja dodajte parametar `drop = FALSE`
# parametar odvojite zarezom (kao da se radi o "trećoj" dimenziji indeksiranja)
m[, "d", drop = F]
polje <- array(1:24, dim = c(2, 3, 4))  # polje dimenzija 2 x 3 x 4
polje[, 1:2, 3, drop = FALSE]           # ispis svih redaka, prvog i drugog stupca
# trećeg "sloja", uz zadržavanje tipa polja
# stvorite novu listu naziva `svastara` koja će imati sljedeće elemente
#      element naziva `brojevi` sa cijelim brojevima od 1 do 3
#      element naziva `slova` sa slovima "A" i "B"
#      bezimeni element sa logičkim vektorom `c(T,F)`
#      element naziva `imena` sa imenima "Ivo" i "Ana"
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena("Ivo", "Ana"))
# stvorite novu listu naziva `svastara` koja će imati sljedeće elemente
#      element naziva `brojevi` sa cijelim brojevima od 1 do 3
#      element naziva `slova` sa slovima "A" i "B"
#      bezimeni element sa logičkim vektorom `c(T,F)`
#      element naziva `imena` sa imenima "Ivo" i "Ana"
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
# ispišite listu `svastara`
svastara
# ispišite strukturu liste `svastara`
str(svastara)
# ispišite prvi element liste svastara
svastara[1]
# provjerite njegov tip
typeof(svastara[1])
# ispišite prvi element liste svastara
svastara[1]
# provjerite njegov tip
class(svastara[1])
# ispišite prvi element liste svastara
svastara[1]
# provjerite njegov tip
class(svastara[1])
# ispišite prvi element liste svastara korištenjem  operatora `[[`
svastara[[1]]
# provjerite njegov tip
class(svastara[[1<]])
# ispišite prvi element liste svastara korištenjem  operatora `[[`
svastara[[1]]
# provjerite njegov tip
class(svastara[[1]])
# ispišite prvi element liste svastara korištenjem  operatora `[[`
svastara[[1]]
# provjerite njegov tip
class(svastara[[1]])
# ispišite prvi element liste svastara
svastara[1]
# provjerite njegov tip
typeof(svastara[1])
# ispišite prvi element liste svastara korištenjem  operatora `[[`
svastara[[1]]
# provjerite njegov tip
typeof(svastara[[1]])
# ispišite element naziva "slova" liste svastara
# korištenjem operatora `[[`
svastara[["slova"]]
# ispišite isti element korištenjem operatora `$`
# ispišite element naziva "slova" liste svastara
# korištenjem operatora `[[`
svastara[["slova"]]
# ispišite isti element korištenjem operatora `$`
svastara$slova
# listi `svastara` dodajte element `parniBrojevi` koji sadrži
# sve parne brojeve od 1 do 100
svastara$parniBrojevi <- seq(0, 101, 2)
svastara
# obrišite treći element liste
# ispišite listu `svastara`
# listi `svastara` dodajte element `parniBrojevi` koji sadrži
# sve parne brojeve od 1 do 100
svastara$parniBrojevi <- seq(0, 101, 2)
svastara
# obrišite treći element liste
svastara[3] <- NULL
# ispišite listu `svastara`
svastara
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(readxl)
library(ggplot2)
library(plyr)
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(readxl)
library(ggplot2)
library(plyr)
kpis <- read_excel("2017_10_Junior Data Analyst.xlsx", sheet="KPIs")
installs <- read_excel("2017_10_Junior Data Analyst.xlsx", sheet="Installs")
daily_active <- read_excel("2017_10_Junior Data Analyst.xlsx", sheet="Daily Active Users")
revenue <- read_excel("2017_10_Junior Data Analyst.xlsx", sheet="Revenue")
installs_df <- data.frame(installs)
installs_df <- melt(installs_df, id.vars = 'Date', variable.name = 'series')
ggplot(installs_df, aes(Date,value)) + geom_line(aes(colour = series))
View(installs_df)
installs_df <- data.frame(installs)
installs_df <- melt(installs_df, id.vars = 'Date', variable.name = 'series')
rename(installs_df, c("value"="revenue"))
ggplot(installs_df, aes(Date,revenue)) + geom_line(aes(colour = series))
View(installs_df)
installs_df <- data.frame(installs)
installs_df <- melt(installs_df, id.vars = 'Date', variable.name = 'series')
rename(installs_df, c("value"="revenue"))
ggplot(installs_df, aes(Date,value)) + geom_line(aes(colour = series))
installs_df <- data.frame(installs)
installs_df <- melt(installs_df, id.vars = 'Date', variable.name = 'series')
installs_df <- rename(installs_df, c("value"="revenue"))
View(installs_df)
installs_df <- data.frame(installs)
installs_df <- melt(installs_df, id.vars = 'Date', variable.name = 'series')
installs_df <- rename(installs_df, c("value"="revenue"))
ggplot(installs_df, aes(Date,revenue)) + geom_line(aes(colour = series))
installs_df <- data.frame(installs)
installs_df <- melt(installs_df, id.vars = 'Date', variable.name = 'series')
installs_df <- rename(installs_df, c("value"="installs"))
ggplot(installs_df, aes(Date,installs)) + geom_line(aes(colour = series))
installs_df <- data.frame(installs)
installs_df <- melt(installs_df, id.vars = 'Date', variable.name = 'series')
installs_df <- rename(installs_df, c("value"="installs"))
ggplot(installs_df, aes(Date,installs)) + geom_line(aes(colour = series))
ggplot(installs_df[which(installs_df$series %in% c("China", "Vietnam")), ],
aes(Date,revenue)) + geom_line(aes(colour = series))
View(installs_df)
ggplot(installs_df[which(installs_df$series %in% c("China", "Vietnam")), ],
aes(Date,installs)) + geom_line(aes(colour = series))
revenue_df <- data.frame(revenue)
revenue_df <- melt(revenue_df, id.vars = 'Date', variable.name = 'series')
revenue_df <- rename(revenue_df, c("value"="revenue"))
ggplot(revenue_df, aes(Date,revenue)) + geom_line(aes(colour = series))
ggplot(revenue_df[which(revenue_df$series %in% c("China", "Japan")), ],
aes(Date,revenue)) + geom_line(aes(colour = series))
daily_active_df <- data.frame(daily_active)
daily_active_df <- melt(daily_active_df,id.vars = 'Date', variable.name = 'series')
revenue_df <- rename(revenue_df, c("value"="daily_users"))
ggplot(daily_active_df, aes(Date,daily_users)) + geom_line(aes(colour = series))
daily_active_df <- data.frame(daily_active)
daily_active_df <- melt(daily_active_df,id.vars = 'Date', variable.name = 'series')
daily_active_df <- rename(revenue_df, c("value"="daily_users"))
ggplot(daily_active_df, aes(Date,daily_users)) + geom_line(aes(colour = series))
daily_active_df <- data.frame(daily_active)
daily_active_df <- melt(daily_active_df,id.vars = 'Date', variable.name = 'series')
daily_active_df <- rename(revenue_df, c("value"="daily_users"))
View(daily_active_df)
daily_active_df <- data.frame(daily_active)
daily_active_df <- melt(daily_active_df,id.vars = 'Date', variable.name = 'series')
daily_active_df <- rename(daily_active_df, c("value"="daily_users"))
ggplot(daily_active_df, aes(Date,daily_users)) + geom_line(aes(colour = series))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
a <- seq(11, 100)
a
a <- seq(11, 99)
a
a <- seq(11, 99)
b <- rep(0, times=100)
b
a <- seq(11, 99)
b <- rep(0, times=100)
c <- seq(0, 1, 0.1)
c
nums <- seq(101, 1001)
nums <- nums[nums %% 10 != 0]
nums
nums <- seq(101, 1001)
nums <- nums[nums %% 10 != 0]
sum(nums)
m_inv <- solve(m)
# stvaramo matricu 3x3 nasumično odabranih elemenata iz skupa od 1 do 100
set.seed(1234)
m <- matrix(c(sample(1:100, 9, T)), nrow = 3, ncol = 3, byrow = T)
m_inv <- solve(m)
m_inv <- solve(m)
m_inv
m_inv <- solve(m)
m %*% m_inv
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara$slova[3]
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara$slova[3]
length(svastara$imena)
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara$slova[3]
length(svastara$imena)
svastara$imena <- append(svastara$imena, "Pero")
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara$slova[3]
length(svastara$imena)
svastara$imena <- append(svastara$imena, "Pero")
svastara$imena
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara$slova[3]
length(svastara$imena)
svastara$imena <- append(svastara$imena, "Pero")
4 %in% svastara[1]
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara$slova[3]
length(svastara$imena)
svastara$imena <- append(svastara$imena, "Pero")
4 %in% svastara[1]
svastara$novi <- list(a = 1:3, b = 1:3, c = 1:3)
svastara
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
cat("-------")
svastara$slova[3]
cat("-------")
length(svastara$imena)
cat("-------")
svastara$imena <- append(svastara$imena, "Pero")
4 %in% svastara[1]
cat("-------")
svastara$novi <- list(a = 1:3, b = 1:3, c = 1:3)
svastara
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
print("-------")
svastara$slova[3]
print("-------")
length(svastara$imena)
print("-------")
svastara$imena <- append(svastara$imena, "Pero")
4 %in% svastara[1]
print("-------")
svastara$novi <- list(a = 1:3, b = 1:3, c = 1:3)
svastara
knitr::opts_chunk$set(echo = TRUE)
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara$slova[3]
length(svastara$imena)
svastara$imena <- append(svastara$imena, "Pero")
4 %in% svastara[1]
svastara$novi <- list(c(1:3), c(1:3), c(1:3))
svastara
svastara <- list(brojevi = 1:3, slova = c("A", "B"), c(T, F), imena = c("Ivo", "Ana"))
class(svastara[2])
svastara$slova[3]
length(svastara$imena)
svastara$imena <- append(svastara$imena, "Pero")
4 %in% svastara[1]
svastara <- append(svastara, list(c(1:3), c(1:3), c(1:3)))
svastara
str(svastara)
setwd("~/Documents/III_Semestar/R")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = 'hold')
set.seed(1234)  # (zbog ponovljivosti)
# rješenje gornjeg primjera
rez <- runif(100, 0, 100) # 100 nasumičnih varijabli iz uniformne razdiobe od 0 do 100
rez <- round(rez,2)
rez <- sample(rez, 10)
rez <- mean(rez)
rez
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
h(g(f(x), y), z, w)                      # kod bez %>% operatora
f(x) %>% g(y) %>% h(z,w)                 # kod sa %>% bez korištenja točke
runif(100, 0, 100) %>% round(2) %>% sample(10) %>% mean()
runif(100, 0, 100) %>% round(2) %>% sample(10) %>% mean()
runif(100, 0, 100) %>% round(2) %>% sample(10) %>% mean()
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
set.seed(1234)
# ponovite gornji primjer, ali uz pomoć samo jednog retka programskog koda
rez <- mean(sample(round(runif(100, 0, 100), 2), 10))
rez
set.seed(1234)
# ponovo rješite prvi primjer uz pomoć %>% operatora
runif(100, 0, 100) %>% round(2) %>% sample(10) %>% mean()
suma <- 1:10 %>% sum   # rezultat se pohranjuje u varijablu 'suma'
1:10 %>% sum -> suma   # radi istovjetno gornjem primjeru
l <- list(a = 1:10, b = 10:20, c = 100:200)
# stvorite matricu koja će sadržavati prvi i zadnji element svakog elementa liste
# elementi moraju biti poredani po retcima
# koristite funkcije lapply, unlist i matrix te %>% operator
# rezultat spremite u varijablu `rez`
l %>% lapply(function(x) c(x[1], x[length(x)])) %>% unlist() %>% matrix(ncol = 2, byrow = T) %>% rez
l %>% lapply(function(x) c(x[1], x[length(x)])) %>% unlist() %>% matrix(ncol = 2, byrow = T) -> rez
l <- list(a = 1:10, b = 10:20, c = 100:200)
# stvorite matricu koja će sadržavati prvi i zadnji element svakog elementa liste
# elementi moraju biti poredani po retcima
# koristite funkcije lapply, unlist i matrix te %>% operator
# rezultat spremite u varijablu `rez`
l %>% lapply(function(x) c(x[1], x[length(x)])) %>% unlist() %>% matrix(ncol = 2, byrow = T) -> rez
# ispišite `rez`
rez
studenti <- read.csv("09_podaci/studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
studenti <- read.csv("/09_podaci/studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
studenti <- read.csv("09_podaci/studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
View(studenti)
studenti <- read.csv("studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
View(studenti)
studenti <- read.csv("studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F, header = T)
View(rez)
View(studenti)
studenti <- read.csv("studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
studenti <- read.csv("studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
View(studenti)
studenti <- read.csv("studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
View(studenti)
studenti <- read.csv("studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
View(studenti)
studenti <- read.csv("studenti.csv", fileEncoding="latin1", stringsAsFactors = F)
View(studenti)
studenti <- read.csv("studenti.csv", encoding="UTF-8", stringsAsFactors = F)
View(studenti)
studenti <- read.csv("studenti.csv", fileEncoding = ="UTF-8", stringsAsFactors = F)
studenti <- read.csv("studenti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
studenti <- read.csv('studenti.csv', stringsAsFactors = T)
View(studenti)
str(studenti)
studenti <- read.csv('studenti.csv', stringsAsFactors = F)
str(studenti)
studenti <- read.csv('studenti.csv', stringsAsFactors = F, na.strings = "NULL")
str(studenti)
head(studenti)
head(studenti)
ocjene <- gather(studenti, Predmet, Ocjena, Matematika.1:Algoritmi.1, na.rm = T, factor_key = T )
ocjene
str(ocjene)
head(ocjene)
tail(ocjene)
studenti2 <- spread(ocjene, Predmet, Ocjena)
studenti2
auti <- read.csv("auti.csv", fileEncoding="UTF-8", stringsAsFactors = F)
View(auti)
auti <- read.csv("auti.csv", stringsAsFactors = F)
View(auti)
auti <- read.csv("auti.csv", stringsAsFactors = F)
View(auti)
# učitajte datoteku `auti.csv` u podatkovni okvir naziva `auti`
auti <- read.csv("auti.csv", stringsAsFactors = F)
# proučite okvir `auti`
str(auti)
head(auti)
auti2 <- spread(auti, Tehnicka.karakteristika, Vrijednost)
str(auti2)
head(auti2)
racuni <- read.csv("potrosackaKartica.csv", stringsAsFactors = F)
racuni <- read.csv("potrosackaKosarica.csv", stringsAsFactors = F)
str(racuni)
head(racuni)
racuniDugi <- gather(data = racuni, artikl, vrijednosti, Coca.cola.2l:Nescaffe)
View(racuniDugi)
# pretvorite podatke okvira `racuni` iz "širokog" formata u "dugi"
racuniDugi <- gather(data = racuni, artikl, vrijednosti, Coca.cola.2l:Nescaffe)
# novi okvir nazovite `racuniDugi`
racuniDugi <- racuniDugi [racuniDugi$vrijednost != 0, 1:2]
racuniDugi <- racuniDugi[order(racuniDugi$racunID), ]
head(racuniDugi)
write.csv(racuniDugi, file = 'potrosackaKosaricaDugiFormat.csv', row.names = F)
# pretvorite podatke okvira `racuni` iz "širokog" formata u "dugi"
# novi okvir nazovite `racuniDugi`
racuniDugi <- gather(racuni, artikl, vrijednost, -racunID)
racuniDugi <- racuniDugi [racuniDugi$vrijednost != 0, 1:2]
racuniDugi <- racuniDugi[order(racuniDugi$racunID), ]
head(racuniDugi)
write.csv(racuniDugi, file = 'potrosackaKosaricaDugiFormat.csv', row.names = F)
# pokušajte "dugi" format oblikovati natrag u "široki"
# pohranite rezultat u datoteku `potrosackaKosaricaSirokiFormat.csv`
racuniSiroki <- racuniDugi
racuniSiroki$Vrijednost <- 1
racuniSiroki <- spread(racuniSiroki, artikl, Vrijednost, fill = 0)
head(racuniSiroki)
write.csv(racuniSiroki, file = 'potrosackaKosaricaSirokiFormat.csv', row.names = F)
# čitajte podatke iz datoteke `odjeli.csv` u varijablu `odjeli`
odjeli <- read.csv("odjeli.csv", stringsAsFactors = F)
# proučite okvir `odjeli`
str(odjeli)
head(odjeli)
odjeli %>% separate(Kvartal, c("Kvartal", "Godina"), "-") -> odjeli2
str(odjeli2)
head(odjeli2)
odjeli2 %>% unite(Kvartal, Kvartal, Godina, "-") -> odjeli3
odjeli2 %>% unite(Kvartal, Kvartal, Godina, sep = "-") -> odjeli3
# spojite stupce `Kvartal` i `Godina` iz tablice `odjeli2` u jedinstven stupac `Kvartal`
# uklonite stupce `Kvartal` i `Godina`
# koristite `-` kao separator
# spremite rezultat u varijablu `odjeli3`
# sve ovo izvedite u sklopu jedne naredbe uz pomoć `%>%` operatora
odjeli2 %>% unite(Kvartal, Kvartal, Godina, sep = "-") -> odjeli3
# proučite okvire `odjeli` i `odjeli3`
head(odjeli)
head(odjeli3)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1234)
set.seed(1234)
rnorm(n=100000,sd=1000,mean=10000) %>% ceiling() %>% unique() %>% sort() %>% sample(100) %>% matrix(ncol=10,nrow=10, byrow=T) %>% rowSums() %>% mean()
weather <- read.csv('weather.csv', stringsAsFactors = T, na.strings = 'NULL')
weather <- read.csv('weather.csv', stringsAsFactors = T, na.strings = 'NULL')
str(weather)
head(weather)
weather$ID <- 1:nrow(weather)
weather <- weather[order(weather$time_hour),]
weather %>% spread("Measure", "Value", fill = NA) %>% head(10)
weather$ID <- 1:nrow(weather)
weather <- weather[order(weather$time_hour),]
weather %>% spread("Measure", "Value", fill = NA) %>%head(10)
weather %>% spread("Measure", "Value", fill = NA) -> weather2
weather$ID <- 1:nrow(weather)
weather <- weather[order(weather$time_hour),]
weather %>% spread("Measure", "Value", fill = NA) -> weather2
str(weather2)
head(weather2)
wather2 <- spread(weather, )
weather <- read.csv('weather.csv', stringsAsFactors = T, na.strings = 'NULL')
str(weather)
head(weather)
weather <- weather[order(weather$time_hour),]
weather %>% spread("Measure", "Value", fill = NA) -> weather2
str(weather2)
head(weather2)
write.csv(weather2, file = 'weatherClean.csv', row.names = F)
rnorm(n=100000,sd=1000,mean=10000) %>% ceiling() %>% unique() %>% sort() %>% sample(100) %>% matrix(ncol=10,nrow=10, byrow=T) %>% rowSums() %>% mean()
set.seed(1234)
