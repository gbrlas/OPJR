a
rev(a)
unique(a)
a
rev(a)
unique(a)
asc(a)
sort(a)
ls(as.environment(package:magrittr))
ls(as.environment(magrittr))
as.environment(magrittr)
as.environment(magrittr)
as.environment(package:magrittr)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
```{r}
as.environment(package:magrittr)
as.environment(magrittr)
as.environmen("magrittr")
r
as.environment(magrittr)
?as.environment
ls
ls()
search()
as.environment("package:magrittr")
ls(as.environment("package:magrittr"))
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = 'hold')
rm(list=ls())
ime_funkcije <- function(ulazni argumenti) {
# napišite funkciju `veci` koja prima dva numerička vektora iste duljine
# i vraća vektor koji sadrži veći od dva elementa na istim mjestima
# ukoliko jedan ili oba vektora nisu numerički ili nisu iste duljine,
# funkcija mora izbaciti grešku
# u funkciji nemojte koristiti petlje
veci <- function(a, b) {
stopifnot(is.numeric(a) && is.numeric(b) && length(a) == length(b))
}
# pozovite funkciju `veci` nad kombinacijama vektora
# c(T, F, T) i c(1, 2, 3)
# c(1, 2, 3, 4) i c(5, 6, 7)
# c(1, 2, 3) i c(0, 4, 2)
# (preporuka - drugi dio zadatka isprobati direktno u konzoli!)
veci(c(T, F, T), c(1, 2, 3))
veci <- function(a, b) {
stopifnot(is.numeric(a) && is.numeric(b) && length(a) == length(b))
return(ifelse(a >= b, a, b))
}
veci(c(1, 2, 3, 4), c(5, 6, 7))
veci(c(1, 2, 3), c(0, 4, 2))
# napišite funkciju `veci` koja prima dva numerička vektora iste duljine
# i vraća vektor koji sadrži veći od dva elementa na istim mjestima
# ukoliko jedan ili oba vektora nisu numerički ili nisu iste duljine,
# funkcija mora izbaciti grešku
# u funkciji nemojte koristiti petlje
veci <- function(a, b) {
stopifnot(is.numeric(a) && is.numeric(b) && length(a) == length(b))
return(ifelse(a >= b, a, b))
}
# pozovite funkciju `veci` nad kombinacijama vektora
# c(T, F, T) i c(1, 2, 3)
# c(1, 2, 3, 4) i c(5, 6, 7)
# c(1, 2, 3) i c(0, 4, 2)
veci(c(T, F, T), c(1, 2, 3))
# napišite funkciju `veci` koja prima dva numerička vektora iste duljine
# i vraća vektor koji sadrži veći od dva elementa na istim mjestima
# ukoliko jedan ili oba vektora nisu numerički ili nisu iste duljine,
# funkcija mora izbaciti grešku
# u funkciji nemojte koristiti petlje
veci <- function(a, b) {
stopifnot(is.numeric(a) && is.numeric(b) && length(a) == length(b))
return(ifelse(a >= b, a, b))
}
# pozovite funkciju `veci` nad kombinacijama vektora
# c(T, F, T) i c(1, 2, 3)
# c(1, 2, 3, 4) i c(5, 6, 7)
# c(1, 2, 3) i c(0, 4, 2)
#veci(c(T, F, T), c(1, 2, 3))
#veci(c(1, 2, 3, 4), c(5, 6, 7))
veci(c(1, 2, 3), c(0, 4, 2))
ispisiABC <- function(a, b, c) {
print(paste("A:", a, "B:", b, "C:", c))
}
# razmislite - što ispisuje sljedeći poziv funkcije?
ispisiABC(1, a = 2, 3)
ispisiParametre <- function(...) {
parametri <- list(...)
for (p in parametri) print(p)
}
# pozovite gornju funkciju sa proizvoljnim parametrima
ispisiParametre(seq(0, 10, 2))
ispisiParametre <- function(...) {
parametri <- list(...)
for (p in parametri) print(p)
}
# pozovite gornju funkciju sa proizvoljnim parametrima
ispisiParametre(seq(0, 10, 2))
# stvorite varijablu `ivo` koja će biti klase `Osoba` a koja će imati sljedeće vrijednosti atributa:
# OIB: 1357135713, prezime: Ivić, tezina: 76
ivo <- Osoba(oib = 1357135713, prezime = "Ivić", tezina = 76)
# stvorite varijablu `ivo` koja će biti klase `Osoba` a koja će imati sljedeće vrijednosti atributa:
# OIB: 1357135713, prezime: Ivić, tezina: 76
ivo <- Osoba(oib = 1357135713, prezime = "Ivic", tezina = 76)
# konstruktor klase osoba
Osoba <- function(oib, prezime, tezina) {
stopifnot(is.character(oib))
stopifnot(is.character(prezime))
stopifnot(is.numeric(tezina) && tezina > 0)
o <- list(oib = oib, prezime = prezime, tezina = tezina)
class(o) <- "Osoba"
o
}
# stvorite varijablu `ivo` koja će biti klase `Osoba` a koja će imati sljedeće vrijednosti atributa:
# OIB: 1357135713, prezime: Ivić, tezina: 76
ivo <- Osoba(oib = 1357135713, prezime = "Ivic", tezina = 76)
# stvorite varijablu `ivo` koja će biti klase `Osoba` a koja će imati sljedeće vrijednosti atributa:
# OIB: 1357135713, prezime: Ivić, tezina: 76
ivo <- Osoba(oib = "1357135713", prezime = "Ivic", tezina = 76)
# ispišite varijablu `ivo`
ivo
f <- function(x) {
x <- x + 1
}
x <- 5
f(x)
print(x)
f <- function(x) {
x <- x + 1
}
x <- 5
f(x)
print(x)
# implementirajte funkciju f tako da dohvati referencu na globalnu okolinu
# i poveća "vanjski" x za 1
f <- function() {
e <- globalenv()
e$x <- e$x + 1
}
x <- 5
# pozovite f(x) i ispisite x
f(x)
# implementirajte funkciju f tako da dohvati referencu na globalnu okolinu
# i poveća "vanjski" x za 1
f <- function() {
e <- globalenv()
e$x <- e$x + 1
}
x <- 5
# pozovite f(x) i ispisite x
f()
x
# implementirajte funkciju f tako da dohvati referencu na globalnu okolinu
# i poveća "vanjski" x za 1
f <- function() {
e <- globalenv()
e$x <- e$x + 1
}
x <- 5
# pozovite f(x) i ispisite x
f()
x
# operator `<<-`
f <- function(x) {
x <- 6
x <<- 7
}
x <- 5
f()
x
# operator `<<-`
f <- function(x) {
class(x)
x <- 6
x <<- 7
}
x <- 5
f()
# operator `<<-`
f <- function(x) {
typeof(x)
x <- 6
x <<- 7
}
x <- 5
f()
# operator `<<-`
f <- function(x) {
x <- 6
x <<- 7
}
x <- 5
f()
x
stvoriteljFje <- function() {
f <- function(x) x + 1
return(f)
}
novaFja <- stvoriteljFje() # dobili smo funkciju "dodavanja jedinice"
novaFja(5)
tvornicaMnozenja <- function(num) {
function(x) x * num
}
puta2 <- tvornicaMnozenja(2)
puta2(3)
# anonimna funkcija s pozivom
(function(x) x + 1)(2)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
ispisi.Osoba(pero)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
pero
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
ispisi.Osoba(pero)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
ispisi.Osoba(pero)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
ispisi.Osoba(pero)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
ispisi.Osoba(pero)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
#ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- funciton(x) {
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
#ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(y)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
#ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
#ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
#ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
#ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
print(x)
cat(paste("OIB:", x.oib, "Prezime:", x.prezime, "tezina:", x.tezina))
}
#ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
#ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
print(x)
cat(paste("OIB:", x$oib, "Prezime:", x$prezime, "tezina:", x$tezina))
}
#ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
#ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
print(x)
cat(paste("OIB:", x$oib, "Prezime:", x$prezime, "tezina:", x$tezina))
}
ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x$oib, "Prezime:", x$prezime, "tezina:", x$tezina))
}
ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x$oib, "Prezime:", x$prezime, "tezina:", x$tezina, "\n"))
}
ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
# ispišite varijablu `Pero` uz pomoć generičke funkcije `print`
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
# ispišite varijablu `Pero` uz pomoć generičke funkcije `print`
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
# ispišite varijablu `Pero` uz pomoć generičke funkcije `print`
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
print.Osoba <- ispisi.Osoba()
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
print.Osoba <- ispisi.Osoba
# ispišite varijablu `Pero` uz pomoć generičke funkcije `print`
print(pero)
# prikažite sve do sad poznate implementacije generičke funkcije `summary`
methods(summary)
# provjerite koje sve implementacije generičkih funkcija postoje za klasu `factor`
methods(class = factor)
# prikažite sve do sad poznate implementacije generičke funkcije `summary`
methods(summary)
# provjerite koje sve implementacije generičkih funkcija postoje za klasu `factor`
methods(class = factor)
