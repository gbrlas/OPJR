# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
print(x)
cat(paste("OIB:", x$oib, "Prezime:", x$prezime, "tezina:", x$tezina))
}
#ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
#ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
print(x)
cat(paste("OIB:", x$oib, "Prezime:", x$prezime, "tezina:", x$tezina))
}
ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x$oib, "Prezime:", x$prezime, "tezina:", x$tezina))
}
ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
pero <- Osoba(oib = "12345678", prezime = "Peric", tezina = 78)
# stvaramo novu generičku funkciju `ispisi` uz pomoć funkcije `UseMethod`
ispisi <- function(x) UseMethod("ispisi")
# implementirajte funkciju naziva `ispisi.Osoba` koja prima jedan parametar (očekivano klase `Osoba`)
# te na zaslon ispisuje podatke o osobi na sljedeći način:
# OIB: <oib>, Prezime: <prezime>, tezina: <tezina>
# za slaganje ispisa koristite funkciju `paste`
# a za sam ispis funkciju `cat`
ispisi.Osoba <- function(x) {
cat(paste("OIB:", x$oib, "Prezime:", x$prezime, "tezina:", x$tezina, "\n"))
}
ispisi.Osoba(pero)
# implementirajte funkciju naziva ispisi.default koja prima jedan parametar
# i ispisuje ga na zaslon uz pomoć funkcije `cat`
ispisi.default <- function(x) {
cat(x)
}
# ispišite varijablu `pero` uz pomoć generičke funkcije `ispisi`
ispisi(pero)
# ispišite vektor c(1, 2, 3, 4, 5) uz pomoć generičke funkcije `ispisi`
ispisi(c(1:5))
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
# ispišite varijablu `Pero` uz pomoć generičke funkcije `print`
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
# ispišite varijablu `Pero` uz pomoć generičke funkcije `print`
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
# ispišite varijablu `Pero` uz pomoć generičke funkcije `print`
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
print.Osoba <- ispisi.Osoba()
# provjerite da li je print generička funkcija
# (jednostavno ispišite njezin izvorni kod navođenjem samog imena funkcije)
print
# omogućite ispis klase `Osoba` uz pomoć generičke funkcije `print`
# (možete se poslužiti funkcijom iz prethodnog zadatka)
print.Osoba <- ispisi.Osoba
# ispišite varijablu `Pero` uz pomoć generičke funkcije `print`
print(pero)
# prikažite sve do sad poznate implementacije generičke funkcije `summary`
methods(summary)
# provjerite koje sve implementacije generičkih funkcija postoje za klasu `factor`
methods(class = factor)
# prikažite sve do sad poznate implementacije generičke funkcije `summary`
methods(summary)
# provjerite koje sve implementacije generičkih funkcija postoje za klasu `factor`
methods(class = factor)
rm(list = ls())
setwd("~/Documents/III_Semestar/R")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = 'hold')
m
m <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
# ispišite matricu `m`
m
# uz pomoć funkcije `apply` izračunajte
# i ispišite zbrojeve stupaca matrice `m`
# uz pomoć funkcije `apply` izračunajte
# i ispišite umnoške redaka matrice `m`
apply(m, 2, sum())
apply(m, 2, sum
# uz pomoć funkcije `apply` izračunajte
# i ispišite umnoške redaka matrice `m`
apply(m, 2, sum)
apply(m, 2, sum)
apply(m, 1, *)
apply(m, 1, prod)
m <- matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE)
# ispišite matricu `m`
m
# uz pomoć funkcije `apply` izračunajte
# i ispišite zbrojeve stupaca matrice `m`
apply(m, 2, sum)
# uz pomoć funkcije `apply` izračunajte
# i ispišite umnoške redaka matrice `m`
apply(m, 1, prod)
apply(m, 1, function(x) x[1])   # izvlačimo prvi element svakog retka
apply(m, 1, function(x) round(log(sum(x)), digits = 2))
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, length(m))) {
rez[i] <- round(log(sum(m[i])))
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i])))
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i])))
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i])))
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i])))
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i])))
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i,])))
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i,:])))
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i][:])))
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(0, nrow(m))) {
rez[i] <- round(log(sum(m[i])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(1, nrow(m))) {
rez[i] <- round(log(sum(m[i])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(1, nrow(m) + 1)) {
rez[i] <- round(log(sum(m[i])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(1, nrow(m))) {
rez[i] <- round(log(sum(m[i])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(1, nrow(m))) {
rez[i] <- round(log(sum(m[i,])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(1, nrow(m))) {
rez[i] <- round(log(sum(m[i,])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(1, nrow(m))) {
rez[i] <- round(log(sum(m[i,])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in range(1, nrow(m))) {
print(i)
rez[i] <- round(log(sum(m[i,])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in seq(1, nrow(m))) {
print(i)
rez[i] <- round(log(sum(m[i,])), digits = 2)
}
rez
# uz pomoć programske petlje za svaki redak matrice `m`
# izračunajte prirodni logaritam sume elemenata
# zaokružen na 2 decimale  (funkcija `round`!)
rez <- numeric(nrow(m))
for (i in seq(1, nrow(m))) {
rez[i] <- round(log(sum(m[i,])), digits = 2)
}
rez
# apply funkcija i ulazna funkcija sa više parametara
apply(m, 1, function(x,y) x[y], 2)  # izvlačimo drugi element svakog retka
lapply(l, length(l))
l <- list(a = 1:3, b = rep(c(T, F), 10), c = LETTERS)
# pomoću funkcije `lapply` izračunajte duljinu (broj elemenata)
# svakog elementa liste `l`
lapply(l, length(l))
l <- list(a = 1:3, b = rep(c(T, F), 10), c = LETTERS)
# pomoću funkcije `lapply` izračunajte duljinu (broj elemenata)
# svakog elementa liste `l`
lapply(l, length)
# obradite elemente liste `l` na sljedeći način:
# - izračunajte srednju vrijednost ako se radi o numeričkom vektoru
# - prebrojite vrijednosti TRUE ako se radi o logičkom vektoru
# - ispišite duljinu vektora za sve ostale slučajeve
lapply(l, function(x) if (is.numeric(x)) { mean(l) } else if (is.logical()) { sum(l) } else length(x))
# obradite elemente liste `l` na sljedeći način:
# - izračunajte srednju vrijednost ako se radi o numeričkom vektoru
# - prebrojite vrijednosti TRUE ako se radi o logičkom vektoru
# - ispišite duljinu vektora za sve ostale slučajeve
lapply(l, function(x) if (is.numeric(x)) { mean(x) } else if (is.logical(x)) { sum(l) } else length(x))
# obradite elemente liste `l` na sljedeći način:
# - izračunajte srednju vrijednost ako se radi o numeričkom vektoru
# - prebrojite vrijednosti TRUE ako se radi o logičkom vektoru
# - ispišite duljinu vektora za sve ostale slučajeve
lapply(l, function(x) if (is.numeric(x)) { mean(as.vector(x)) } else if (is.logical(x)) { sum(l) } else length(x))
# obradite elemente liste `l` na sljedeći način:
# - izračunajte srednju vrijednost ako se radi o numeričkom vektoru
# - prebrojite vrijednosti TRUE ako se radi o logičkom vektoru
# - ispišite duljinu vektora za sve ostale slučajeve
lapply(l, function(x) if (is.numeric(x)) { mean(as.vector(x)) } else if (is.logical(x)) { sum(as.vector(x)) } else length(x))
# koristite funkciju `lapply` i anonimnu funkciju
# ne zaboravite da i anonimna funkcija može koristiti blokove!
# obradite elemente liste `l` na sljedeći način:
# - izračunajte srednju vrijednost ako se radi o numeričkom vektoru
# - prebrojite vrijednosti TRUE ako se radi o logičkom vektoru
# - ispišite duljinu vektora za sve ostale slučajeve
lapply(l, function(x) if (is.numeric(x)) { mean(unlist(x)) } else if (is.logical(x)) { sum(unlist(x)) } else length(x))
# koristite funkciju `lapply` i anonimnu funkciju
# ne zaboravite da i anonimna funkcija može koristiti blokove!
l <- list(a = 1:10, b = 10:20, c = 100:200)
# izračunajte srednje vrijednosti elemenata liste `l`
# rezultate ispišite kao numerički vektor
# koristite lapply i unlist
unlist(lapply(l, mean(ulist())))
l <- list(a = 1:10, b = 10:20, c = 100:200)
# izračunajte srednje vrijednosti elemenata liste `l`
# rezultate ispišite kao numerički vektor
# koristite lapply i unlist
unlist(lapply(l, mean(unlist())))
l <- list(a = 1:10, b = 10:20, c = 100:200)
# izračunajte srednje vrijednosti elemenata liste `l`
# rezultate ispišite kao numerički vektor
# koristite lapply i unlist
unlist(lapply(l, mean(unlist())))
l <- list(a = 1:10, b = 10:20, c = 100:200)
# izračunajte srednje vrijednosti elemenata liste `l`
# rezultate ispišite kao numerički vektor
# koristite lapply i unlist
unlist(x = lapply(l, mean(unlist())))
l <- list(a = 1:10, b = 10:20, c = 100:200)
# izračunajte srednje vrijednosti elemenata liste `l`
# rezultate ispišite kao numerički vektor
# koristite lapply i unlist
unlist(x = lapply(l, mean(unlist())))
lapply(l, mean(unlist())
unlist(x = )
lapply(l, mean(unlist()))
l <- list(a = 1:10, b = 10:20, c = 100:200)
lapply(l, mean(unlist()))
lapply(l, mean(unlist)
unlist(x = )
lapply(l, mean(unlist))
lapply(l, mean())
lapply(l, mean
unlist(x = )
lapply(l, mean)
l <- list(a = 1:10, b = 10:20, c = 100:200)
# izračunajte srednje vrijednosti elemenata liste `l`
# rezultate ispišite kao numerički vektor
# koristite lapply i unlist
unlist(lapply(l, mean))
sapply(l, median)
sapply(l, function(x) x[1], x[length(x) - 1])
sapply(l, function(x) x[1] x[length(x) - 1])
sapply(l, function(x) c(x[1], x[length(x) - 1]))
sapply(l, function(x) c(x[1], x[length(x)1]))
sapply(l, function(x) c(x[1], x[length(x)]))
podaci <- list(brojevi <- c(1:5),
imena <- c("Ivo", "Pero", "Ana"),
abeceda <- LETTERS)
vapply(podaci, length, FUN.VALUE = numeric(1))
vapply(podaci, function(x) as.character(c(x[1], x[2])), FUN.VALUE = character(2))
vapply(podaci, function(x) as.logical(x), FUN.VALUE = character(1))
podaci <- list(brojevi <- c(1:5),
imena <- c("Ivo", "Pero", "Ana"),
abeceda <- LETTERS)
# razmislite koji će od sljedećih poziva biti uspješan,
# a koji će izbaciti grešku
# rezultate provjerite na konzoli
vapply(podaci, length, FUN.VALUE = numeric(1))
vapply(podaci, function(x) as.character(c(x[1], x[2])), FUN.VALUE = character(2))
vapply(podaci, function(x) as.logical(x), FUN.VALUE = character(1))
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
lapply(df, function(x) if (is.numeric(x)) { norm(x) }
# ispišite df
lapply(df, function(x) if (is.numeric(x)) { norm(x) }
lapply(df, function(x) if (is.numeric(x)) { norm(x) })
lapply(df, function(x) if (is.numeric(x)) { x })
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
# normalizirajte numeričke stupce uz pomoć funkcije `lapply`
# ostale stupce nemojte mijenjati
# normalizirane vrijednosti zaokružite na tri decimale
# rezultat pohranite u varijablu df
lapply(df, function(x) if (is.numeric(x)) { scale(x) })
# ispišite df
df <- lapply(df, function(x) if (is.numeric(x)) { scale(x) })
df
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
# normalizirajte numeričke stupce uz pomoć funkcije `lapply`
# ostale stupce nemojte mijenjati
# normalizirane vrijednosti zaokružite na tri decimale
# rezultat pohranite u varijablu df
df <- lapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) })
df
# ispišite df
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
# normalizirajte numeričke stupce uz pomoć funkcije `lapply`
# ostale stupce nemojte mijenjati
# normalizirane vrijednosti zaokružite na tri decimale
# rezultat pohranite u varijablu df
df <- lapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) } else x)
df
# ispišite df
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
df
# normalizirajte numeričke stupce uz pomoć funkcije `lapply`
# ostale stupce nemojte mijenjati
# normalizirane vrijednosti zaokružite na tri decimale
# rezultat pohranite u varijablu df
df <- lapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) } else x)
df
# ispišite df
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
df
# normalizirajte numeričke stupce uz pomoć funkcije `lapply`
# ostale stupce nemojte mijenjati
# normalizirane vrijednosti zaokružite na tri decimale
# rezultat pohranite u varijablu df
df <- data.frame(lapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) } else x))
df
# ispišite df
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
# normalizirajte numeričke stupce uz pomoć funkcije `lapply`
# ostale stupce nemojte mijenjati
# normalizirane vrijednosti zaokružite na tri decimale
# rezultat pohranite u varijablu df
df[] <- lapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) } else x)
# ispišite df
df
sapply(df, class)
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
# normalizirajte numeričke stupce uz pomoć funkcije `lapply`
# ostale stupce nemojte mijenjati
# normalizirane vrijednosti zaokružite na tri decimale
# rezultat pohranite u varijablu df
df[] <- lapply(df, function(x) if (is.numeric(x)) { round((x - mean(x)) / sd(x), 3) } else x)
# ispišite df
df
scale(x)
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
# normalizirajte numeričke stupce uz pomoć funkcije `lapply`
# ostale stupce nemojte mijenjati
# normalizirane vrijednosti zaokružite na tri decimale
# rezultat pohranite u varijablu df
df[] <- lapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) } else x)
# ispišite df
df
df <- sapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) } else x)
df
df[] <- lapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) } else x)
df
df <- data.frame( a = 1:10, b = seq(100, 550, 50),
c = LETTERS[1:10], d = rep(c(T,F), 5),
e = -10:-1)
df[] <- lapply(df, function(x) if (is.numeric(x)) { round(scale(x), 3) } else x)
df
